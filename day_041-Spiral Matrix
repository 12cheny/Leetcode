#Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

#通过７，L两种形式来消矩阵

class Solution(object):
    def spiralOrder(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: List[int]
        """
        if matrix==[]:
            return []
        def add_0(k):
            a = len(k)
            b = len(k[0])
            return k[0]+[x[n-1] for x in k[1:a]]
        def add_1(k):
            a = len(k)
            b = len(k[0])
            return k[a-1][::-1]+[x[0] for x in k[:a-1]][::-1]
        def del_0(m):
            a = len(m)
            b = len(m[0])
            del m[0]
            for i in range(a-1):
                del m[i][b-1]
        def del_1(m):
            del m[len(m)-1]
            a=len(m)
            b=len(m[0])
            for i in range(a):
                del m[i][0]
        k=[]
        i=0
        m=len(matrix)
        n=len(matrix[0])
        while m>1 and n>1:
            if i%2==0:
                k+=add_0(matrix)
                del_0(matrix)
            else:
                k+=add_1(matrix)
                del_1(matrix)
            m = len(matrix)
            n = len(matrix[0])
            i+=1
        if i%2==0:
            if m==1:
                return k+matrix[0]
            else:
                return k+[x[0] for x in matrix[:m]]
        else:
            if m==1:
                return k+matrix[0][::-1]
            else:
                return k+[x[0] for x in matrix[:m]][::-1]
                
  #也可以定义四个方向来移动
  
  class Solution(object):
    def spiralOrder(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: List[int]
        """
        if not matrix: return []
        top = left = 0
        bottom = len(matrix) - 1
        right = len(matrix[0]) - 1
        res = []
        direct = 0
        while (top <= bottom and left <= right):
            if direct == 0:
                for i in range(left, right+1):
                    res.append(matrix[top][i])
                top += 1
            if direct == 1:
                for i in range(top, bottom+1):
                    res.append(matrix[i][right])
                right -= 1
            if direct == 2:
                for i in range(right, left-1, -1):
                    res.append(matrix[bottom][i])
                bottom -= 1
            if direct == 3:
                for i in range(bottom, top-1, -1):
                    res.append(matrix[i][left])
                left += 1
            direct = (direct+1)%4
        return res
